{"ast":null,"code":"var _jsxFileName = \"/Users/monasingh/Desktop/React-Packages/src/Accordian/index.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Card from './card';\nimport { cardData } from './constant';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Accordian() {\n  _s();\n  const [openCard, setOpenCard] = useState([2]);\n\n  //state of array of index that is opened default will be empty\n  // onclicking of card it will check if card is open or not \n  // to check if open we have to find the click index in the openCard state array\n  //found to be open then we have to closed it and to closed it we have to remove that clicked index from the openCard state array\n  //if founded to close then we have to opened the card\n  // to open a card we have to add the  clicked index in the openCard state array\n\n  const handleClick = value => {\n    let prevOpenCard = [...openCard];\n    if (prevOpenCard.includes(value)) {\n      const indexVal = prevOpenCard.indexOf(value);\n      prevOpenCard.splice(indexVal, 1);\n    } else {\n      prevOpenCard.push(value);\n    }\n    setOpenCard(prevOpenCard);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: cardData === null || cardData === void 0 ? void 0 : cardData.map((item, value) => /*#__PURE__*/_jsxDEV(Card, {\n      item: item,\n      onSquareClick: () => handleClick(value),\n      active: openCard.includes(value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 7\n  }, this);\n}\n_s(Accordian, \"HIlfjLufGOxxo+76slcklk3RCEw=\");\n_c = Accordian;\nexport default Accordian;\nvar _c;\n$RefreshReg$(_c, \"Accordian\");","map":{"version":3,"names":["React","useState","Card","cardData","jsxDEV","_jsxDEV","Accordian","_s","openCard","setOpenCard","handleClick","value","prevOpenCard","includes","indexVal","indexOf","splice","push","children","map","item","onSquareClick","active","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/monasingh/Desktop/React-Packages/src/Accordian/index.js"],"sourcesContent":["import React, { useState } from 'react'\nimport Card from './card'\nimport { cardData } from './constant'\nfunction Accordian() {\n    const [openCard, setOpenCard] = useState([2])\n\n\n//state of array of index that is opened default will be empty\n// onclicking of card it will check if card is open or not \n// to check if open we have to find the click index in the openCard state array\n//found to be open then we have to closed it and to closed it we have to remove that clicked index from the openCard state array\n//if founded to close then we have to opened the card\n// to open a card we have to add the  clicked index in the openCard state array\n\n    const handleClick=(value)=>{\n        let prevOpenCard=[...openCard];\n\n       if(prevOpenCard.includes(value)){\n        const indexVal= prevOpenCard.indexOf(value)\n        prevOpenCard.splice(indexVal,1);\n       }else{\n        prevOpenCard.push(value);\n       }\n       setOpenCard(prevOpenCard);\n    }\n   \n   \n  return (\n      <div >\n        {cardData?.map((item,value)=> (\n            <Card item={item} onSquareClick={()=>handleClick(value)} active={openCard.includes(value)}/>\n        ))}\n     </div>\n  )\n}\n\nexport default Accordian;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,IAAI,MAAM,QAAQ;AACzB,SAASC,QAAQ,QAAQ,YAAY;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACrC,SAASC,SAASA,CAAA,EAAG;EAAAC,EAAA;EACjB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;;EAGjD;EACA;EACA;EACA;EACA;EACA;;EAEI,MAAMS,WAAW,GAAEC,KAAK,IAAG;IACvB,IAAIC,YAAY,GAAC,CAAC,GAAGJ,QAAQ,CAAC;IAE/B,IAAGI,YAAY,CAACC,QAAQ,CAACF,KAAK,CAAC,EAAC;MAC/B,MAAMG,QAAQ,GAAEF,YAAY,CAACG,OAAO,CAACJ,KAAK,CAAC;MAC3CC,YAAY,CAACI,MAAM,CAACF,QAAQ,EAAC,CAAC,CAAC;IAChC,CAAC,MAAI;MACJF,YAAY,CAACK,IAAI,CAACN,KAAK,CAAC;IACzB;IACAF,WAAW,CAACG,YAAY,CAAC;EAC5B,CAAC;EAGH,oBACIP,OAAA;IAAAa,QAAA,EACGf,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEgB,GAAG,CAAC,CAACC,IAAI,EAACT,KAAK,kBACtBN,OAAA,CAACH,IAAI;MAACkB,IAAI,EAAEA,IAAK;MAACC,aAAa,EAAEA,CAAA,KAAIX,WAAW,CAACC,KAAK,CAAE;MAACW,MAAM,EAAEd,QAAQ,CAACK,QAAQ,CAACF,KAAK;IAAE;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAC9F;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEX;AAACnB,EAAA,CA/BQD,SAAS;AAAAqB,EAAA,GAATrB,SAAS;AAiClB,eAAeA,SAAS;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}